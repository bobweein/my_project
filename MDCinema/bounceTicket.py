# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bounceTicket.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets


class Bounce_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(500, 500)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lineEdit_MAID = QtWidgets.QLineEdit(Dialog)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_MAID.setFont(font)
        self.lineEdit_MAID.setObjectName("lineEdit_MAID")
        #self.lineEdit_MAID.returnPressed.connect(self.bounceinfo)
        self.verticalLayout.addWidget(self.lineEdit_MAID)
        self.label_moviename = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_moviename.setFont(font)
        self.label_moviename.setObjectName("label_moviename")
        self.verticalLayout.addWidget(self.label_moviename)
        self.label_starttime = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_starttime.setFont(font)
        self.label_starttime.setObjectName("label_starttime")
        self.verticalLayout.addWidget(self.label_starttime)
        self.label_endtime = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_endtime.setFont(font)
        self.label_endtime.setObjectName("label_endtime")
        self.verticalLayout.addWidget(self.label_endtime)
        self.label_Price = QtWidgets.QLabel(Dialog)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_Price.setFont(font)
        self.label_Price.setObjectName("label_Price")
        self.verticalLayout.addWidget(self.label_Price)
        self.pushButton_bounce = QtWidgets.QPushButton(Dialog)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_bounce.setFont(font)
        self.pushButton_bounce.setObjectName("pushButton_bounce")
        self.pushButton_bounce.clicked.connect(self.bounceTicket)
        self.verticalLayout.addWidget(self.pushButton_bounce)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    # 退票前检测是否买票
    def checkifbuy(self,MAID):
        flag  = None
        try :
            conn  = sqlite3.connect("cinema.db")
            cur = conn.cursor()
            sql = "SELECT ID FROM Ticket  WHERE ID = {}".format(MAID)
            cur.execute(sql)
            flag = cur.fetchone()
            conn.commit()
        except sqlite3.Error as e:
            print(e)
        return flag
    # 检测输入的MAID 是否在MocieMenu 中。
    def bounceIsMAID(self,MAID):
        flag  = None
        try :
            conn  = sqlite3.connect("cinema.db")
            cur = conn.cursor()
            sql = "SELECT ID FROM MovieArrangement WHERE ID = {}".format(MAID)
            cur.execute(sql)
            flag = cur.fetchone()
            conn.commit()
        except sqlite3.Error as e:
            print(e)
        return flag

    def bounceTicket(self):
        MAID = self.lineEdit_MAID.text()
        # 判断输入是否买了该票
        flag = self.checkifbuy(MAID)
        if flag!= None:
            try:
                conn = sqlite3.connect("cinema.db")
                cur = conn.cursor()
                
                # 从电影票表中查找是否有订单
                sql2 = '''
                SELECT TicketID FROM Ticket WHERE ID = {} '''.format(MAID)
                cur.execute(sql2)
                result1 = cur.fetchone()
                if result1!=None:
                    for res in result1:
                        result = res
                    
                    sql3 = '''
                    DELETE FROM Ticket WHERE TicketID = {}'''.format(result)
                    cur.execute(sql3)

                    #根据MAID 查找放映厅，将放映厅中余票数加一（即退票操作）
                    sql1 = '''
                    UPDATE 
                    ScreenHall 
                    SET 
                    Seats=Seats+1
                    WHERE 
                    ID = (SELECT HallID FROM MovieArrangement WHERE ID ={} )'''.format(MAID)
                    cur.execute(sql1)
                    # 展示电影的信息，并告知删除成功
                    self.bounceinfo()
                    self.label_Price.setText(self.label_Price.text()+"Bounce Successfully!")
                    conn.commit()
                else:
                    self.label_moviename.setText("You did't buy this Ticket!!!!!")
                    self.label_starttime.setText("")
                    self.label_endtime.setText("")
                    self.label_Price.setText("")
            except sqlite3.Error as e:
                print(e)
        else:
            self.label_moviename.setText("You didn't buy this Tickets! Please buy ticket firstly")
            self.label_starttime.setText("")
            self.label_endtime.setText("")
            self.label_Price.setText("")
    def bounceinfo(self):
        MAID = self.lineEdit_MAID.text()
        
        try:
            conn = sqlite3.connect("cinema.db")
            cur = conn.cursor()
            sql = '''
                    SELECT 
                    M.MovieName,MA.StartTime,MA.EndTime,M.Price 
                    FROM 
                    Movie M,(SELECT * FROM MovieArrangement WHERE ID = {})MA 
                    WHERE 
                    M.MovieID = MA.MovieID'''.format(MAID)
            cur.execute(sql)
            result = cur.fetchone()
            self.label_moviename.setText("Movie Name: " +result[0])
            self.label_starttime.setText("Starttime: "+ result[1])
            self.label_endtime.setText("EndTime: "+ result[2])
            self.label_Price.setText("Price: "+ str(result[3])+"        ")
            conn.commit()
        except sqlite3.Error as e:
            print(e)
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Bounce Ticket"))
        self.lineEdit_MAID.setPlaceholderText(_translate("Dialog", "Please Enter the MAID"))
        self.label_moviename.setText(_translate("Dialog", "Movie Name:"))
        self.label_starttime.setText(_translate("Dialog", "Starttime:"))
        self.label_endtime.setText(_translate("Dialog", "EndTime:"))
        self.label_Price.setText(_translate("Dialog", "Price:"))
        self.pushButton_bounce.setText(_translate("Dialog", "Bounce"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Bounce_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
